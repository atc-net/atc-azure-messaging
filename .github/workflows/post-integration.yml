name: "Post-Integration"

on:
  push:
    branches:
      - main
      - '!stable'
      - '!release'

env:
  ATC_EMAIL: 'atcnet.org@gmail.com'
  ATC_NAME: 'Atc-Net'
  NUGET_REPO_URL: 'https://nuget.pkg.github.com/atc-net/index.json'

jobs:
  merge-to-stable:
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_WORKFLOWS }}

      - name: ⚛️ Sets environment variables - branch-name
        uses: nelonoel/branch-name@v1.0.1

      - name: ⚛️ Sets environment variables - Nerdbank.GitVersioning
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: 🧹 Clean
        run: dotnet clean -c Release && dotnet nuget locals all --clear

      - name: 🔁 Restore packages
        run: dotnet restore

      - name: 🛠️ Build
        run: dotnet build -c Release --no-restore /p:UseSourceLink=true

      - name: 🧪 Run unit tests
        run: dotnet test -c Release --no-build

      - name: ⏩ Merge to stable-branch
        run: |
          git config --local user.email ${{ env.ATC_EMAIL }}
          git config --local user.name ${{ env.ATC_NAME }}
          git checkout stable
          git merge --ff-only main
          git push origin stable

      - name: 🗳️ Creating library package for pre-release
        run: dotnet pack -c Release --no-restore -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH_NAME

      - name: 📦 Push packages to GitHub Package Registry
        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'Atc.Azure.Messaging.'${NBGV_NuGetPackageVersion}'.nupkg' -k ${{ secrets.GITHUB_TOKEN }} -s ${{ env.NUGET_REPO_URL }} --skip-duplicate

  sonar-cloud:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_WORKFLOWS }}

      - name: ⚙️ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 🧹 Clean
        run: dotnet clean -c Release && dotnet nuget locals all --clear

      - name: 🔁 Restore packages
        run: dotnet restore

      - name: 🌩️ SonarCloud install scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: 🌩️ SonarCloud Prepare
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          dotnet-sonarscanner begin `
              /k:"atc-azure-messaging" `
              /o:"atc-net" `
              /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
              /d:sonar.host.url="https://sonarcloud.io" `
              /d:sonar.cs.vscoveragexml.reportsPaths=**/*.coveragexml

      - name: 🛠️ Build
        run: dotnet build -c Release --no-restore /p:UseSourceLink=true

      - name: 🧪 Run unit tests
        run: dotnet test -c Release --no-build --collect "Code coverage"

      - name: ⚙️ Setup dotnet 6.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Convert Code Coverage
        continue-on-error: true
        run: |
          dotnet tool update dotnet-coverageconverter --global
          dotnet-coverageconverter --CoverageFilesFolder . --ProcessAllFiles

      - name: 🌩️ SonarCloud analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"